name: Deploy to ECR

on:
 
  push:
    branches: [ main ]

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '286523409430.dkr.ecr.eu-west-3.amazonaws.com/app:99'
        format: 'sarif'
        output: 'trivy-results.sarif'
      env:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'

    #- name: Build the Container image
      #run: docker build . --file Dockerfile --tag localbuild/testimage:latest
    #- uses: anchore/scan-action@v3
      #id: scan
    #  with:
      #  image: "localbuild/testimage:latest"
      #  acs-report-enable: true
       # severity-cutoff: critical

    #- name: upload Anchore scan SARIF report
     # uses: github/codeql-action/upload-sarif@v1
     # with:
       # sarif_file: ${{ steps.scan.outputs.sarif }}

   # - name: Build the Docker image
      #run: docker build . --file Dockerfile --tag sysdiglabs/dummy-vuln-app:latest
    #- name: Scan image
     # uses: sysdiglabs/scan-action@v1
     # with:
      #  image-tag: "sysdiglabs/dummy-vuln-app:latest"
      #  sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_TOKEN }}
      
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7.1

    - name: Cache
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Bundle Install
      run: |  
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: base
        IMAGE_TAG: ${{github.run_number}}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
